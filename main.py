import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('aW1wb3J0IG9zLCB0aW1lDQpmb3IgbGwgaW4gcmFuZ2UoMTApOg0KICAgIHByaW50KCJQUklNRVJPIElOU1RBTEFSRU1PUyBMTyBORUNFU0FSSU8iKQ0KICAgIHRpbWUuc2xlZXAoMC4xKQ0Kb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBmYWtlcicpDQpvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykNCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgcGhvbmVudW1iZXJzJykNCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgcHlhdXRvZ3VpJykNCm9zLnN5c3RlbSgncGlwIGluc3RhbGwgcHlzaG9ydGVuZXJzJykNCmltcG9ydCB0aW1lLCBweWF1dG9ndWksIG9zLCBmYWtlciwgY29sb3JhbWENCmZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUNCmltcG9ydCBwaG9uZW51bWJlcnMNCmZyb20gcGhvbmVudW1iZXJzIGltcG9ydCBnZW9jb2Rlcg0KZnJvbSBwaG9uZW51bWJlcnMgaW1wb3J0IHRpbWV6b25lDQpmcm9tIHBob25lbnVtYmVycyBpbXBvcnQgY2Fycmllcg0KZnJvbSBmYWtlciBpbXBvcnQgRmFrZXINCmltcG9ydCBweXNob3J0ZW5lcnMgYXMgcXRpaQ0KDQpwcmludChmIiIie0ZvcmUuUkVEfQ0KICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiAgICAuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLjtjb3gwT2RjY2RPMHhvYzsuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1dXTU1NTU1XV01NTU1NV1dPJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb1dNTU1NTU1NTU1NTU1NTU1NV28NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzBNTU1NTU1NTU1NTU1NTU1NTU0wJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvV01NTU1NTU1NTU1NTU1NTU1NTVdsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzBNTU1NTU1NTU1NTU1NTU1NTU1NTTAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbFdNTU1NTU1NTU1NTU1NTU1NTU1NTVdsDQogICAgICAgICAgICAgICAgICAgLi4nLDpsYywuO09OTU1NTU1NTU1NV01NTU1NTU1NTk87LixjbDosJy4uDQogICAgICAgICAgICAgICAgIC46a0tOV01XV05rbDpjbHhPS05XTU1NTU1NV05LT3hsYzpsa05XV01XTktrOi4NCiAgICAgICAgICAgICAgIC47Jy4uOngwTldXV01XV0t4b2xsb29sbGxsbGxsbGxsb3hLV1dNV1dXTktkOi4uJzsuDQogICAgICAgICAgICAgLHhLV2suICAgLixsa1hNTVdNTU1NV05YSzAwMEtLWE5XTU1NTU1NTVhrbCwuICAgLk9XS3gsDQogICAgICAgICAgICAgO09OV05kOm9vYzosLi5jZDBOTU1NTU1NTU1NTU1NTU1NTU1NTktkOi4uOzpsZGwnZFdNTk87DQogICAgICAgICAgICAgIC5sMFdOeGRYV1dOby4gIC4sbHgwTldNTU1NTU1NTVdOMHhsLC4gICdPV01XMGNkTldLbC4NCiAgICAgICAgICAgICAgICAub1hOa2RLV1dOby4gICAgIC4nOmxvZGR4ZG9sOicuICAgICAna1dNV09jeE5Yby4NCiAgICAgICAgICAgICAgICAgICdkWE9vMFdXTmwuLicuLi4uICAgICAgICAgIC4uLicnLidrV1dOeGNPWGQnDQogICAgICAgICAgICAgICAgICAgICx4T29rTk1ObC4nOjo6Ojs7LCwsLCw7Ozs6Ojo6JydrV1dYb2xreCwNCiAgICAgICAgICAgICAgICAgICAgIC54WHhkS1dYYy4sOjs6Ojo6Ozs7Ojo6Ojs7OicneFdXT2NkS3guDQogICAgICAgICAgICAgICAgICAgLmwwTldXT29PTlhsLiw6Ojo6Ojo6Ojo7Ojo7OiwneFdYZGxPV01OMGwuDQogICAgICAgICAgICAgICAgICAgLjt4WFdXV1h4ZFhOZCcuLDo6Ojo6Ojo7OjosLjtPVzBsZFhXTVdYeDsuDQogICAgICAgICAgICAgICAgICAgICAgLmN4WFdOT2RPTjBsLi4sOzo6Ojo7LCcsZFhYZGxPV1dYeGMuDQogICAgICAgICAgICAgICAgICAgICAgICAgLmN4WFh4ZEtXMGwnLiw7OycuO2RYV2tsZFhYeGMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLmN4a2RrTk1rLiAgICA7WE1Lb2x4eGMuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvZDBYOiAgICBkTmtsY2MnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLDp4bC4gIC5vbCwsLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4gICAuLi4NCg0KICAgICAgICAgICAgICAgICAgICA9PT09PT09PT09PT09PUJ5IFF1M3RpPT09PT09PT09PT09PQ0KICAgICAgICAgICAgICAgICAgICAgIDEpIENsaWNrZXIgICANCg0KICAgICAgICAgICAgICAgICAgICAgIDIpIEluZGV4IEdlbiANCg0KICAgICAgICAgICAgICAgICAgICAgIDMpIFBob25lIFNjYW5uZXINCiAgICAgICAgICAgICAgICAgICAgICB7Rm9yZS5SRVNFVH0NCiAgICAgIiIiKQ0KDQojIExlZW1vcyBsbyBxdWUgaW5ncmVzYSBlbCB1c3VhcmlvDQplbGlnaW89aW5wdXQoIkVsaWplOiIpDQoNCiMgU2Vnw7puIGxvIHF1ZSBpbmdyZXPDsywgY8OzZGlnbyBkaWZlcmVudGUNCmlmIGVsaWdpbz09IjEiOg0KICAgIHh6ID0gaW50KGlucHV0KCJDYW50aWRhZCBkZSBjbGlja3M6ICIpKQ0KICAgIGZvciBpIGluIHJhbmdlKHh6KToNCiAgICAgICAgcHlhdXRvZ3VpLmNsaWNrKCkNCmVsaWYgZWxpZ2lvPT0iMiI6DQogICAgcHJpbnQoZiJ7Rm9yZS5SRUR9TkVDRVNJVEFTIFRFTkVSIExBIENBUlBFVEEgQUJJRVJUQSBKVU5UTyBBIEVMIFNDUklQVCBQQVJBIFFVRSBGVU5DSU9ORXtGb3JlLlJFU0VUfSIpDQogICAgYXJjaD1vcGVuKCJJbmRleC5odG1sIiwgImEiKQ0KICAgIGljID0gaW5wdXQoZiJ7Rm9yZS5SRUR9SWNvbm8gZGUgaW5kZXg6ICIpDQogICAgaWYgbm90IGljOg0KICAgICAgICBpYz0iaHR0cHM6Ly9wcmV2aWV3LnJlZGQuaXQvcXRsZGc3YWpvMTg0MS5wbmc/YXV0bz13ZWJwJnM9MjRjMmEwNTQ0ZGE4YWRlYTgwMzFmYWM0M2M4NmZiMWI5YThhZDYzMyINCiAgICB0aXQgPSBpbnB1dCgiVGl0dWxvOiAiKQ0KICAgIGlmIG5vdCB0aXQ6DQogICAgICAgIHRpdD0iSGV5Ig0KICAgIGdyID0gaW5wdXQoIlBhbGFicmEgY29uIGNzczogIikNCiAgICBpZiBub3QgZ3I6DQogICAgICAgIGdyPSJMT0wiDQogICAgZ2YgPSBpbnB1dCgiR2lmIG8gaW1hZ2VuIHBhcmEgYWdyZWdhcjogIikNCiAgICBpZiBub3QgZ2Y6DQogICAgICAgIGdmPSJodHRwczovL2kyLndwLmNvbS9zLmthc2t1cy5pZC9pbWFnZXMvMjAxMi8xMi8yNi80MzgzMzkxXzIwMTIxMjI2MDExMTU5LmdpZiINCiAgICBtcnEgPSBpbnB1dChmIlBhbGFicmEgcGFyYSBNYXJxdWVlOiAiKQ0KICAgIGlmIG5vdCBtcnE6DQogICAgICAgIG1ycT1mImhvbGF7Rm9yZS5SRVNFVH0iDQogICAgYXJjaC53cml0ZShmIiIiDQogICAgDQo8IURPQ1RZUEUgaHRtbD4NCjxsaW5rIHJlbD0iaWNvbiIgaHJlZj0ie2ljfSI+DQoNCjxodG1sIGxhbmc9ImVuIj4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCiAgICA8dGl0bGU+e3RpdH08L3RpdGxlPg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0ic3R5bGUuY3NzIj4NCiAgICA8aHRtbCBsYW5nPSJlbiI+DQogICAgPGhlYWQ+DQogICAgICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4NCg0KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9InN0eWxlLmNzcyI+DQogICAgDQogICAgDQogICAgPGNlbnRlcj4NCiAgICAgICAgPC9hPg0KICAgIDwvYm9keT4NCiAgICA8L2h0bWw+DQogICAgPGxlZnQ+DQogICAgICAgIDxoMT4NCiAgICA8cCAgICBjbGFzcz0ibmVvbjIiPntncn0gPC9wPg0KICAgIA0KICAgIA0KICAgICAgICA8L2gxPg0KICAgIDwvbGVmdD4NCiAgICA8L2NlbnRlcj4NCiAgICAgIA0KPGh0bWw+DQo8aGVhZD4NCjxtZXRhIGNoYXJzZXQiVVRGLTgiPg0KPG1ldGEgbmFtZT0idmlld3BvcnQiY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+DQogICAgPHRpdGxlPkluZGV4PC90aXRsZT4NCjwvaGVhZD4NCg0KPGJvZHkgYmdjb2xvcj0iYmxhY2siYWxpZ249ImNlbnRlciI+DQo8ZGl2IGNsYXNzPSJiYXJyIj48L2Rpdj4NCg0KDQoNCg0KPC9icj4NCjxpbWcgc3JjPSJ7Z2Z9IiANCmFsdD0iTCJ3aWR0aD0iMzAwImhlaWdodD0iMzAwIj4NCjwvaW1nPg0KDQo8L2gyPg0KDQo8cCBzdHlsZT0iY29sb3I6cmdiKDI1NSwgMCwgMCk7Zm9udC1zaXplOjIwcHgiPiANCjxNYXJxdWVlPnttcnF9PC9NYXJxdWVlPg0KPC9icj4NCjwvYnI+DQoNCg0KICAgIA0KICAgICIiIikNCiAgICBhcmNoPW9wZW4oInN0eWxlLmNzcyIsICJhIikNCiAgICBhcmNoLndyaXRlKCIiIg0KDQoubmVvbiB7DQogICAgZm9udC1mYW1pbHk6ICJEYW5jaW5nIFNjcmlwdCIsIGN1cnNpdmU7DQogICAgbWFyZ2luOiAwOw0KICAgIGZvbnQtc2l6ZTogNTBweDsNCiAgICB0ZXh0LXNoYWRvdzogMCAwIDVweCByZ2IoMjExLCAxMiwgMTIpLCAwIDAgMTVweCByZ2JyZ2IoOCwgNjIsIDc4KSwgMCAzMHB4IHJnYigyNTUsIDAsIDApLCAwIDAgNTBweCByZ2JyZ2IoOCwgNTgsIDg3KQ0KICB9DQogIA0KICAubmVvbjIgew0KICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7DQogICAgbGV0dGVyLXNwYWNpbmc6IDhweDsNCiAgICBtYXJnaW46IDA7DQogICAgZm9udC1zaXplOiAxMDBweDsNCiAgICB0ZXh0LXNoYWRvdzogMCAwIDVweCByZ2IoMTk3LCAxMywgMTMpLCAwIDAgMTVweCByZ2IoMjIxLCAzOSwgNyksIDAgMCAzMHB4IHJnYigyNTUsIDAsIDApOw0KICB9DQogICAgIiIiKQ0KDQplbGlmIGVsaWdpbz09IjMiOg0KICAgIGRhdGE9aW5wdXQoJ0luZ3Jlc2EgZWwgbnVtZXJvOiAnKQ0KDQpudW1kYXRhID0gcGhvbmVudW1iZXJzLnBhcnNlKGRhdGEpDQp6b25lID0gdGltZXpvbmUudGltZV96b25lc19mb3JfbnVtYmVyKG51bWRhdGEpDQoNCmdlbyA9IGdlb2NvZGVyLmRlc2NyaXB0aW9uX2Zvcl9udW1iZXIobnVtZGF0YSwgJ2VzJykNCg0KY2FyciA9ICgiQ2FycmllcjogIitjYXJyaWVyLm5hbWVfZm9yX251bWJlciAobnVtZGF0YSwgJ2VzJykpDQoNCnByaW50KCJFc3BlcmEuLi4iKQ0KdGltZS5zbGVlcCgwLjQpDQpwcmludCgnXDAzM1szMm0nIkxpc3RvISAiKQ0KdGltZS5zbGVlcCgwLjIpDQoNCnByaW50KG51bWRhdGEpDQpwcmludCh6b25lKQ0KcHJpbnQoZ2VvKQ0KcHJpbnQoY2FycikNCnRpbWUuc2xlZXAoMTUp')))
